import React, { useState,useEffect } from 'react';
import { Flex,Box,Spinner, Heading, Text, Image,Tabs,TabList,TabPanel,TabPanels,TabIndicator,Tab } from '@chakra-ui/react';
import NavBar from '@/components/NavBar'
import Head from 'next/head';
import { useRouter } from 'next/router';
import { IoIosArrowBack } from 'react-icons/io';;

import axios from 'axios'
interface Property {
    public_id: string;
    title: string;
    description: string;
    bedrooms: number | null;
    bathrooms: number | null;
    half_bathrooms: number | null;
    parking_spaces: number | null;
    lot_size: number;
    construction_size: number;
    lot_length: number;
    lot_width: number;
    floors: number | null;
    floor: number | null;
    age: string;
    internal_id: string;
    expenses: number | null;
    location: {
      name: string;
      latitude: number;
      longitude: number;
      street: string;
      postal_code: string;
      show_exact_location: boolean;
      hide_exact_location: boolean;
      exterior_number: string;
      interior_number: string;
    };
    property_type: string;
    created_at: string;
    updated_at: string;
    published_at: string;
    operations: {
      type: string;
      amount: number;
      currency: string;
      formatted_amount: string;
      commission: {
        type: string;
      };
      unit: string;
    }[];
    property_files: any[];
    videos: any[];
    virtual_tour: string | null;
    collaboration_notes: string | null;
    public_url: string;
    tags: any[];
    show_prices: boolean;
    share_commission: boolean;
    property_images: {
      title: string;
      url: string;
    }[];
    agent: {
      id: number;
      name: string;
      full_name: string;
      mobile_phone: string;
      profile_image_url: string;
      email: string;
    };
    features: {
      name: string;
      category: string;
    }[];
  }
  
  type ContactRequest = {
    name: string;
    phone: string;
    email: string;
    property_id: string;
    message: string;
    source: string;
    happened_at: string;

  };
  type Pagination = {
    limit: number;
    page: number;
    total: number;
    next_page: number | null;
  };
  
  type ContactRequestsResponse = {
    pagination: Pagination;
    content: ContactRequest[];
  };
interface IndexProps {
  property: Property;
  contacts: ContactRequest;

}



enum PropertySection {
  BasicInfo = 'basicInfo',
  Location = 'location',
  Operations = 'operations',
  Features = 'features',
  Agent = 'agent',
  
}


function Index({ property, }: IndexProps) {
  const [isLoading, setisLoading] = useState<boolean>(false);
  const [currentSection, setCurrentSection] = useState<PropertySection>(PropertySection.BasicInfo);
  const [contactRequests, setContactRequests] = useState<ContactRequest[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');
  const router = useRouter();
  useEffect(() => {
    const handleStart = () => setLoading(true);
    const handleComplete = () => setisLoading(false);

    router.events.on('routeChangeStart', handleStart);
    router.events.on('routeChangeComplete', handleComplete);
    router.events.on('routeChangeError', handleComplete);

    return () => {
      router.events.off('routeChangeStart', handleStart);
      router.events.off('routeChangeComplete', handleComplete);
      router.events.off('routeChangeError', handleComplete);
    };
  }, [router]);
  useEffect(() => {
    const fetchData = async () => {
      const { query } = router;
      try {
        const response = await axios.get<ContactRequestsResponse>( `/api/contacts/${query.id}`);
        setContactRequests(response.data.content);
        setLoading(false);
      } catch (error) {
        setError('Error fetching contact requests data');
        setLoading(false);
      }
    };

    fetchData();
  }, []);
  if (loading) {
    return (
      <Box>
        <Spinner
        size="xl"
        thickness="4px"
        speed="0.65s"
      
        position="fixed"
        top="50%"
        left="50%"
        transform="translate(-50%, -50%)"
      />
      </Box>
    );
  }

  if (error) {
    return (
      <Box>
        <Heading>{error}</Heading>
      </Box>
    );
  }
  return (
    <>
     <Head>
        <title>Ricova CRM</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <Box overflowX="auto">

    <>
   {isLoading && <Spinner />}
  <NavBar/>
<div style={{marginLeft:50, marginTop:50}}>  <button onClick={() => router.push('/property')} >    <IoIosArrowBack size={50} /> Regresar </button></div>

    <Flex alignItems="center" my={10} mx={5}>
    <Flex mr={8}>

    <Image 
      src={property.property_images[0].url} 
      alt={property.property_images[0].title} 
      boxSize="500px"
     
       rounded={'md'}
       fit={'cover'}
       align={'center'}
            w={'120%'}
            h={{ base: '100%', sm: '150%', lg: '150%' }}
       />
    </Flex>

      <Flex direction="column">
        <Heading as="h1" size="lg" mb={4}>
          {property.title}
        </Heading>
       
        <Text fontSize="xl">{property.operations[0].formatted_amount}</Text>
        <Text>{property.description}</Text>

        {/* Menu to switch between property sections */}
        <Tabs position="relative" variant='enclosed'>
    <TabList>
      <Tab>Basic Info</Tab>
      <Tab>Location</Tab>
      <Tab>Operations</Tab>
      <Tab>Features</Tab>
      <Tab>Agent</Tab>
      <Tab>Contacts</Tab>
    </TabList>
    <TabIndicator
      mt="-1.5px"
      height="2px"
      bg="blue.500"
      borderRadius="1px"
    />
    <TabPanels>
      <TabPanel>
      <div>
            <Text>Bedrooms: {property.bedrooms}</Text>
            <Text>Bathrooms: {property.bathrooms}</Text>
            {/* Add other basic info properties here */}
          </div>
      </TabPanel>
      <TabPanel>
      <div>
            <Text>Location name: {property.location.name}</Text>
            <Text>Latitude: {property.location.latitude}</Text>
            <Text>Longitude: {property.location.longitude}</Text>
            {/* Add other location properties here */}
          </div>
      </TabPanel>
      <TabPanel>
      <div>
            <Text>Type: {property.operations[0].type}</Text>
            <Text>Amount: {property.operations[0].amount}</Text>
            {/* Add other operations properties here */}
          </div>
      </TabPanel>
      <TabPanel>
      <div>
            {property.features.map((feature) => (
              <Text key={feature.name}>{feature.name}: {feature.category}</Text>
            ))}
          </div>
      </TabPanel>
      <TabPanel>
      <div>
            <Text>Name: {property.agent.name}</Text>
            <Text>Mobile phone: {property.agent.mobile_phone}</Text>
            {/* Add other agent properties here */}
          </div>
      </TabPanel>
      <TabPanel>
        { loading && (<>
          <Spinner
  thickness='4px'
  speed='0.65s'

  size='xl'
/>
        </>) }
   
      {
    
      contactRequests.map((contactRequest) => (
        <Box key={contactRequest.email}  p={4} mb={4}>
          <Text>Name: {contactRequest.name}</Text>
          <Text>Phone: {contactRequest.phone}</Text>
          <Text>Email: {contactRequest.email}</Text>
          <Text>Property ID: {contactRequest.property_id}</Text>
          <Text>Message: {contactRequest.message}</Text>
          <Text>Source: {contactRequest.source}</Text>
          <Text>Happened At: {new Date(contactRequest.happened_at).toLocaleString()}</Text>
        </Box>
      ))}
   
      </TabPanel>
    </TabPanels>
  </Tabs>

  
      </Flex>
    </Flex>
    </>
    </Box>
    </>
  );
}
export async function getServerSideProps(context: { query: { id: string } }) {
  const { id } = context.query;

  // Fetch property data from API or database
  const res = await fetch(`http://localhost:3000/api/properties/${id}`);
  const property = await res.json();
 
  return {
    props: {
      property,
     
    },
  };
}

export default Index;
